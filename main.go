package main

import (
	"context"
	"log/slog"
	"os"
	"os/signal"
	"syscall"

	_ "base-code-go-gin-clean/docs" // docs is generated by Swag CLI, you have to import it.
	"base-code-go-gin-clean/internal/config"
	"base-code-go-gin-clean/internal/pkg/telemetry"
	cronsvc "base-code-go-gin-clean/internal/service/cron"
	email "base-code-go-gin-clean/internal/service/email"
	"base-code-go-gin-clean/pkg/logger"
	"base-code-go-gin-clean/wire"

	"github.com/joho/godotenv"
)

// @title           Base Code Go Gin Clean API
// @version         1.0
// @description     This is a sample server for a clean Go Gin application.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1

// @securityDefinitions.apikey Bearer
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	// Load .env file into environment variables
	_ = godotenv.Load()

	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		slog.Error("Failed to load config", "error", err)
		os.Exit(1)
	}

	// Initialize logger
	log := logger.New(cfg.Server.Environment)

	// Initialize tracer if enabled
	if cfg.Tracing.Enabled && cfg.Tracing.DSN != "" {
		tracerCleanup, err := telemetry.InitTracer(
			cfg.Tracing.ServiceName,
			cfg.Tracing.DSN,
		)
		if err != nil {
			log.Error("Failed to initialize tracer", "error", err)
			os.Exit(1)
		}
		defer tracerCleanup()
		log.Info("Tracing initialized", "service", cfg.Tracing.ServiceName, "dsn", cfg.Tracing.DSN)
	}

	// Initialize server with Wire
	srv, cleanup, err := wire.InitializeServer()
	if err != nil {
		log.Error("Failed to initialize server", "error", err)
		os.Exit(1)
	}
	defer cleanup()

	// Initialize cron service
	cronSvc := cronsvc.NewCronService()

	// Initialize daily report service
	dailyReportSvc := cronsvc.NewDailyReportService(email.NewEmailService(cfg))

	// Register all cron jobs from the registry
	for _, job := range cronsvc.GetCronJobs(dailyReportSvc) {
		_, err := cronSvc.AddJob(job.Spec, job.Handler)
		if err != nil {
			log.Error("Failed to schedule cron job", "spec", job.Spec, "error", err)
			os.Exit(1)
		}
	}

	// Start cron service
	cronSvc.Start()
	defer cronSvc.Stop()

	log.Info("Cron jobs started")

	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
	defer stop()

	log.Info("Starting server", "port", cfg.Server.Port)
	if err := srv.Start(ctx); err != nil {
		log.Error("Server shutdown with error", "error", err)
		os.Exit(1)
	}

	log.Info("Server exited gracefully")
}
